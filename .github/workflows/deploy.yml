# Nombre del flujo de trabajo que aparecerá en la pestaña "Actions" de GitHub.
name: Deploy to Production Server

# Define cuándo se ejecutará este flujo de trabajo.
on:
  # Se activa cada vez que se hace un push a la rama 'main'.
  push:
    branches: ['main']

jobs:
  build_and_deploy:
    # El tipo de máquina virtual que usará GitHub para ejecutar los pasos.
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Descargar el código de tu repositorio a la máquina virtual.
      - name: Checkout code
        uses: actions/checkout@v4 # <-- Versión actualizada

      # Paso 2: Iniciar sesión en Docker Hub.
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Paso 3: Construir la imagen de Docker y subirla a Docker Hub.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5 # <-- Versión actualizada
        with:
          context: .
          push: true
          # Define el nombre de la imagen en Docker Hub.
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/whatsapp-connector:latest

      # Paso 4: Conectarse al servidor y desplegar la nueva imagen.
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3 # <-- Versión fijada y segura
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          # Ejecuta el script de despliegue que estará en el servidor.
          script: |
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            cd /root/whatsapp-connector
            ./deploy.sh
